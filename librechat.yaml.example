# LibreChat MCP Configuration Example
# Add this section to your librechat.yaml file

version: 1.0.0

mcpServers:
  # Basic configuration with user-provided tokens
  msgraph-basic:
    type: "streamable-http"
    url: "https://your-msgraph-server.com/mcp"
    initTimeout: 30000
    timeout: 60000
    headers:
      Authorization: "Bearer {{MS_GRAPH_TOKEN}}"
      X-User-ID: "{{LIBRECHAT_USER_ID}}"
      X-User-Email: "{{LIBRECHAT_USER_EMAIL}}"
    customUserVars:
      MS_GRAPH_TOKEN:
        title: "Microsoft Graph Access Token"
        description: "Your Microsoft Graph API access token. <a href='https://your-msgraph-server.com/authorize' target='_blank'>Get your token</a>"
    serverInstructions: |
      Microsoft Graph integration for Microsoft 365:
      - Use search-files to find documents in SharePoint and OneDrive
      - Use get-schedule for calendar and meeting management  
      - Use send-mail for email operations
      - Check throttling-stats if requests seem slow
    startup: false  # Requires user authentication first
    chatMenu: true  # Available in chat dropdown

  # OAuth-enabled configuration (recommended for production)
  msgraph-oauth:
    type: "streamable-http"
    url: "https://your-msgraph-server.com/mcp"
    initTimeout: 150000  # Higher timeout for OAuth authentication
    timeout: 60000
    headers:
      X-User-ID: "{{LIBRECHAT_USER_ID}}"
      X-User-Email: "{{LIBRECHAT_USER_EMAIL}}"
      X-User-Role: "{{LIBRECHAT_USER_ROLE}}"
      X-User-Username: "{{LIBRECHAT_USER_USERNAME}}"
    serverInstructions: |
      Microsoft Graph OAuth integration:
      - Automatically handles Microsoft 365 authentication
      - Full access to user's Microsoft Graph data with proper permissions
      - Advanced file search across SharePoint and OneDrive
      - Calendar scheduling and availability checking
      - Email sending and management
      - User and group directory access
      - Built-in throttling protection and retry logic
    chatMenu: true
    startup: true  # Can auto-initialize with OAuth

  # Localhost development configuration
  msgraph-dev:
    type: "streamable-http"
    url: "http://localhost:3001/mcp"
    initTimeout: 15000
    timeout: 30000
    headers:
      Authorization: "Bearer {{DEV_TOKEN}}"
    customUserVars:
      DEV_TOKEN:
        title: "Development Token"
        description: "Local development Microsoft Graph token"
    serverInstructions: |
      Development Microsoft Graph server:
      - For testing and development only
      - Limited to localhost access
      - Use for MCP protocol development
    startup: false
    chatMenu: false  # Only available in agent builder

# Optional: Configure specific models to work better with Microsoft Graph
endpoints:
  # GPT-4 with Microsoft Graph tools
  openAI:
    models:
      gpt-4-0125-preview:
        title: "GPT-4 + Microsoft Graph"
        tools: true  # Enable tool calling
        description: "GPT-4 with full Microsoft Graph integration"

# Optional: Agent configuration with Microsoft Graph
agents:
  msgraph-assistant:
    name: "Microsoft 365 Assistant"
    description: "AI assistant with full Microsoft 365 integration"
    instructions: |
      You are a Microsoft 365 assistant with access to:
      - SharePoint and OneDrive file search
      - Email sending and management
      - Calendar and scheduling
      - User and group directory
      
      Always prioritize user privacy and security. Only access data the user 
      explicitly requests and has permission to view.
    model: "gpt-4-0125-preview"
    tools:
      - msgraph-oauth  # Use the OAuth-enabled MCP server
    avatar:
      source: "https://example.com/microsoft-365-avatar.png"
      alt: "Microsoft 365 Assistant"
